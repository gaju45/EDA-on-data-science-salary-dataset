# -*- coding: utf-8 -*-
"""EDA_on_Data_Science_Salary.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1natzAO5Is36QUzwJrmipxJsSNVbrE-eQ

# EDA On Data Science Salaries in 2023

#**Introduction**

The purpose of this project is to explore a dataset of data science salaries in 2023 and identify any trends or factors that may affect salaries in this field. The dataset was obtained from a survey of data science professionals across various industries and regions.
"""

import numpy as np
import pandas as pd
import seaborn as sns 
from matplotlib import pyplot as plt

# reading CSV file 
df = pd.read_csv('ds_salaries.csv')

df

df.describe()

df.info()

"""From above datasets we can observe that all data types for each column is correct so we don't need to be change."""

df.shape

#count the number of missing value in each column
df.isnull().sum()

"""There are no such records which have missing value, so we don't need to do anything."""

df.head()

# Generates a count plot of job titles
plt.figure(figsize=(10,15))
sns.countplot(y=df["job_title"] , data = df , order = df["job_title"].value_counts().index)
plt.xticks(rotation = 45)
plt.show()

"""#**Performing EDA**

##**a. What is the average salary of each job title?**
"""

#grouping data by 'job_title' and calculate the avarage salary
avg_salary_by_job_title = df.groupby('job_title')['salary'].mean()

#convert the value to the whole number
avg_salary_by_job_title = avg_salary_by_job_title.map(int)

#printing the result for top 5 average salaries
print(avg_salary_by_job_title.sort_values(ascending=False)[:5])
top_5_avg_salary_by_job_title = avg_salary_by_job_title[:5]

#bar plot of top 5 average salaries by job title
plt.figure(figsize=(10, 8))
sns.barplot(y=top_5_avg_salary_by_job_title.values, x=top_5_avg_salary_by_job_title.index)
plt.xlabel('job_title')
plt.ylabel('Average Salary')
plt.title('Top 5 Average Salaries by Job Title')
plt.show()

"""##**b. what is the average salary in data science industry based on experience level?**"""

#grouping data by 'experience_level' and calculate the avarage salary
avg_salary_by_job_title = df.groupby('experience_level')['salary'].mean()

#convert the value to the whole number
avg_salary_by_job_title = avg_salary_by_job_title.map(int)

#printing the result
print(avg_salary_by_job_title.sort_values(ascending=False))

"""##**c. what is the avarage salary based employee residence?**"""

#grouping data by 'experience_level' and calculate the avarage salary
avg_salary_by_experience_level = df.groupby('employee_residence')['salary'].mean()

#convert the value to the whole number
avg_salary_by_experience_level = avg_salary_by_experience_level.map(int)

#printing the result
print(avg_salary_by_experience_level.sort_values(ascending=False))

"""##**d. How many employees work for each company size category?**"""

plt.figure(figsize=(10,5))
sns.countplot(x=df["company_size"] , data = df)
plt.show()

"""##**e. Which job titles have the highest and lowest average salaries?**"""

df.head(5)

# calculate the average salary for each job title
average_salaries = df.groupby('job_title')['salary'].mean()

#converting in whole number
average_salaries = average_salaries.map(int)

# find job title with highest average salary
max_avg_salary_job_title = average_salaries.idxmax()

# find job title with lowest average salary
min_avg_salary_job_title = average_salaries.idxmin()

# print the result
print(f"The job title with the highest average salary is '{max_avg_salary_job_title}' with an average salary of {average_salaries[max_avg_salary_job_title]:}.")
print(f"The job title with the lowest average salary is '{min_avg_salary_job_title}' with an average salary of {average_salaries[min_avg_salary_job_title]:}.")

"""##**f. What is the distribution of salaries across different experience levels?**"""

df.head()

df['experience_level'].value_counts()

salary_dist = df.groupby("experience_level")["salary"].mean()
salary_dist.map(int)

#create a bar chart using seaborn
plt.figure(figsize=(10, 5))
sns.barplot(y=salary_dist.values, x=salary_dist.index)
plt.xlabel('Experience Level')
plt.ylabel('Average Salary')
plt.title('Average Salary across different Experience level')
plt.show()

"""##**g. What is the average salary for each company location?**"""

df.head(5)

average_salaray_company = df.groupby("company_location")["salary"].mean()

top_5_avg_salary_company = average_salaray_company.sort_values(ascending=False).head(5)

# create bar chart using seaborn
plt.figure(figsize=(10, 5))
sns.barplot(y=top_5_avg_salary_company, x=top_5_avg_salary_company.index, color='blue')
plt.xlabel("Company Location")
plt.ylabel("Average Salary")
plt.title("Average Salary across different company Locations")

"""##**h. How many employees work remotely for each job title?**"""

df.head(5)

data = df.loc[df["remote_ratio"] == 100]

data["job_title"].value_counts()

plt.figure(figsize=(10, 25))
sns.countplot(y=df["job_title"], order=df["job_title"].value_counts().index)
plt.show()

"""##**i. Which experience level has the highest percentage of remote workers?**"""

df.head()

df['experience_level'].value_counts()

plt.figure(figsize=(10, 5))
sns.countplot(y=df["experience_level"], order=df["experience_level"].value_counts().index)
plt.show()

"""##**j. which top 5 country has more number of companies in this field?**"""

df["company_location"].value_counts()

plt.figure(figsize=(10, 15))
sns.countplot(y=df["company_location"], order=df["company_location"].value_counts().index)
plt.show()

"""#### we can say that the 95% companies are 'US' based.

"""